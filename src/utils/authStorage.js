import AsyncStorage from '@react-native-async-storage/async-storage';

// ‚úÖ Fonction pour sauvegarder les donn√©es d'authentification
export const saveAuthData = async (token, user) => {
  try {
    await AsyncStorage.setItem('access_token', token);
    await AsyncStorage.setItem('user', JSON.stringify(user));
    console.log("üîê Token sauvegard√© :", token);
console.log("üë§ Utilisateur sauvegard√© :", user);

  } catch (error) {
    console.error("‚ùå Erreur lors de l'enregistrement des donn√©es :", error);
  }
};

// ‚úÖ Fonction pour r√©cup√©rer les donn√©es d'authentification
export const getAuthData = async () => {
  try {
    const token = await AsyncStorage.getItem('access_token');
    const userString = await AsyncStorage.getItem('user');
    return { token, user: userString ? JSON.parse(userString) : null };
  } catch (error) {
    console.error("‚ùå Erreur lors de la r√©cup√©ration des donn√©es :", error);
    return { token: null, user: null };
  }
};

// ‚úÖ Fonction pour supprimer les donn√©es d'authentification
export const clearAuthData = async () => {
  try {
    await AsyncStorage.removeItem('access_token');
    await AsyncStorage.removeItem('user');
  } catch (error) {
    console.error("‚ùå Erreur lors de la suppression des donn√©es :", error);
  }
};

// ‚úÖ Ajout d‚Äôun log pour v√©rifier que le module est bien charg√©
console.log("‚úÖ authStorage.js charg√© avec succ√®s !");
